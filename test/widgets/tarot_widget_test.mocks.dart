// Mocks generated by Mockito 5.1.0 from annotations
// in carg/test/widgets/tarot_widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:carg/models/game/tarot.dart' as _i3;
import 'package:carg/models/score/round/tarot_round.dart' as _i2;
import 'package:carg/models/score/tarot_score.dart' as _i6;
import 'package:carg/services/game/tarot_game_service.dart' as _i7;
import 'package:carg/services/score/tarot_score_service.dart' as _i4;
import 'package:cloud_firestore/cloud_firestore.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTarotRound_0 extends _i1.Fake implements _i2.TarotRound {}

class _FakeTarot_1 extends _i1.Fake implements _i3.Tarot {}

/// A class which mocks [TarotScoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTarotScoreService extends _i1.Mock implements _i4.TarotScoreService {
  MockTarotScoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i6.TarotScore?> getScoreByGame(String? gameId) =>
      (super.noSuchMethod(Invocation.method(#getScoreByGame, [gameId]),
              returnValue: Future<_i6.TarotScore?>.value())
          as _i5.Future<_i6.TarotScore?>);
  @override
  _i5.Stream<_i6.TarotScore> getScoreByGameStream(String? gameId) =>
      (super.noSuchMethod(Invocation.method(#getScoreByGameStream, [gameId]),
              returnValue: Stream<_i6.TarotScore>.empty())
          as _i5.Stream<_i6.TarotScore>);
  @override
  _i5.Future<dynamic> addRoundToGame(String? gameId, _i2.TarotRound? round) =>
      (super.noSuchMethod(Invocation.method(#addRoundToGame, [gameId, round]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> deleteScoreByGame(String? gameId) =>
      (super.noSuchMethod(Invocation.method(#deleteScoreByGame, [gameId]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<String> saveScore(_i6.TarotScore? score) =>
      (super.noSuchMethod(Invocation.method(#saveScore, [score]),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<dynamic> editLastRoundOfGame(
          String? gameId, _i2.TarotRound? round) =>
      (super.noSuchMethod(
          Invocation.method(#editLastRoundOfGame, [gameId, round]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> updateScore(_i6.TarotScore? score) =>
      (super.noSuchMethod(Invocation.method(#updateScore, [score]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> deleteLastRoundOfGame(String? gameId) =>
      (super.noSuchMethod(Invocation.method(#deleteLastRoundOfGame, [gameId]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i2.TarotRound getNewRound() =>
      (super.noSuchMethod(Invocation.method(#getNewRound, []),
          returnValue: _FakeTarotRound_0()) as _i2.TarotRound);
}

/// A class which mocks [TarotGameService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTarotGameService extends _i1.Mock implements _i7.TarotGameService {
  MockTarotGameService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set lastFetchGameDocument(
          _i8.DocumentSnapshot<Object?>? _lastFetchGameDocument) =>
      super.noSuchMethod(
          Invocation.setter(#lastFetchGameDocument, _lastFetchGameDocument),
          returnValueForMissingStub: null);
  @override
  _i5.Future<List<_i3.Tarot>> getAllGamesOfPlayerPaginated(
          String? playerId, int? pageSize) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getAllGamesOfPlayerPaginated, [playerId, pageSize]),
              returnValue: Future<List<_i3.Tarot>>.value(<_i3.Tarot>[]))
          as _i5.Future<List<_i3.Tarot>>);
  @override
  _i5.Future<_i3.Tarot> getGame(String? id) =>
      (super.noSuchMethod(Invocation.method(#getGame, [id]),
              returnValue: Future<_i3.Tarot>.value(_FakeTarot_1()))
          as _i5.Future<_i3.Tarot>);
  @override
  _i5.Future<dynamic> deleteGame(String? id) =>
      (super.noSuchMethod(Invocation.method(#deleteGame, [id]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<_i3.Tarot> createGameWithPlayerList(
          List<String?>? playerListForOrder,
          List<String?>? playerListForTeam) =>
      (super.noSuchMethod(
              Invocation.method(#createGameWithPlayerList,
                  [playerListForOrder, playerListForTeam]),
              returnValue: Future<_i3.Tarot>.value(_FakeTarot_1()))
          as _i5.Future<_i3.Tarot>);
  @override
  _i5.Future<dynamic> endAGame(_i3.Tarot? game) =>
      (super.noSuchMethod(Invocation.method(#endAGame, [game]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> updateGame(_i3.Tarot? game) =>
      (super.noSuchMethod(Invocation.method(#updateGame, [game]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
}
